#!/usr/bin/python

import eventlet
eventlet.monkey_patch()

from optparse import OptionParser
from os import environ
from random import random, randint
from sys import argv, exit
from time import time
from urlparse import urlparse
from uuid import uuid4
from httplib import BadStatusLine
from hashlib import md5
from eventlet import GreenPool, sleep, Timeout
from eventlet.semaphore import Semaphore

from swift.common.bufferedhttp import http_connect
from swiftclient import get_auth, ClientException, Connection
from swift.common.direct_client import direct_get_container, \
    direct_head_container, retry
from swift.common.utils import normalize_timestamp

default_cont_name = 'walt'
direct_exceptions = []

FILL_QUEUE_TIMEOUT = 20


def container_names(num_containers):
    if num_containers:
        return ['%s_%d' % (default_cont_name, i)
                for i in range(num_containers)]
    else:
        return [default_cont_name]


def get_rand_container_name(num_containers):
    if num_containers:
        return '%s_%s' % (default_cont_name, int(random() * num_containers))
    return default_cont_name


def direct_put_object_c(node, part, account, container, obj, conn_timeout=5,
                        response_timeout=15, obj_size=0, chunk_size=0):
    path = '/%s/%s/%s' % (account, container, obj)
    with Timeout(conn_timeout):
        headers = {'x-content-type': 'text/plain',
            'x-size': '0', 'x-timestamp': normalize_timestamp(time()),
            'content-type': 'text/plain', 'content-length': str(obj_size)}
        obj_data = ''
        if chunk_size:
            response_timeout = 300
        else:
            obj_data = '0' * options.object_size
            headers['x-etag'] = md5(obj_data).hexdigest()
        conn = http_connect(node['ip'], node['port'], node['device'], part,
                'PUT', path, headers=headers)

    if chunk_size:
        while obj_size > 0:
            cur_chunk_size = min(obj_size, chunk_size)
            obj_size -= cur_chunk_size
            conn.send('0' * cur_chunk_size)
    else:
        conn.send(obj_data)

    try:
        with Timeout(response_timeout):
            resp = conn.getresponse()
            resp.read()
    except BadStatusLine, e:
        direct_exceptions.append(str(e))
        return 500
    if resp.status < 200 or resp.status >= 300:
        raise ClientException(
                'Container server %s:%s direct object PUT %s gave status %s' %
                (node['ip'], node['port'],
                 repr('/%s/%s%s' % (node['device'], part, path)),
                 resp.status),
                http_host=node['ip'], http_port=node['port'],
                http_device=node['device'], http_status=resp.status,
                http_reason=resp.reason)
    conn.close()
    return resp.status


def direct_delete_object_c(node, part, account, container, obj, conn_timeout=5,
                           response_timeout=15):
    path = '/%s/%s/%s' % (account, container, obj)
    with Timeout(conn_timeout):
        conn = http_connect(node['ip'], node['port'], node['device'], part,
                'DELETE', path,
                headers={'x-timestamp': normalize_timestamp(time())})
    try:
        with Timeout(response_timeout):
            resp = conn.getresponse()
            resp.read()
    except BadStatusLine, e:
        direct_exceptions.append(str(e))
        return 500
    if resp.status < 200 or resp.status >= 300:
        raise ClientException(
            'Container server %s:%s direct object DELETE %s gave status %s' %
            (node['ip'], node['port'],
             repr('/%s/%s%s' % (node['device'], part, path)), resp.status),
            http_host=node['ip'], http_port=node['port'],
            http_device=node['device'], http_status=resp.status,
            http_reason=resp.reason)
    return resp.status


def do_listings(left, sleep_amount, options):
    if options.direct:
        while left[0] > 0:
            left[0] -= 1
            retry(direct_get_container, options.node, options.part,
                  options.account, options.container)
            sleep(sleep_amount)
    else:
        conn = Connection(options.auth, options.user, options.key,
                          preauthurl=options.preauthurl,
                          preauthtoken=options.preauthtoken, snet=options.snet)
        while left[0] > 0:
            left[0] -= 1
            conn.get_container(get_rand_container_name(options.num_containers))
            sleep(sleep_amount)


def keep_delete_queue_filled(left, options):
    while left[0]:
        items = 0
        with options.delete_queue_sema:
            items = len(options.delete_queue)
        if items > 10000:
            sleep(.1)
            continue
        if options.direct:
            cont_lists = []
            for cont_name in container_names(options.num_containers):
                _junk, cont_list = retry(direct_get_container, options.node,
                    options.part, options.account, options.container,
                    marker=options.delete_markers.get(cont_name),
                    response_timeout=FILL_QUEUE_TIMEOUT)
                if cont_list and cont_list[1]:
                    cont_lists.append((cont_name, cont_list[1]))
                    options.delete_markers[cont_name] = \
                        cont_list[1][-1]['name']
            if not cont_lists:
                with options.delete_queue_sema:
                    options.delete_queue.append((False, False))
                break
            with options.delete_queue_sema:
                done = False
                while not done:
                    done = True
                    for cont_name, cont_list in cont_lists:
                        if cont_list:
                            obj_dict = cont_list.pop(0)
                            options.delete_queue.append(
                                (cont_name, obj_dict['name']))
                            done = False
        else:
            conn = Connection(options.auth, options.user, options.key,
                              preauthurl=options.preauthurl,
                              preauthtoken=options.preauthtoken,
                              snet=options.snet)
            cont_lists = []
            for cont_name in container_names(options.num_containers):
                cont_list = conn.get_container(cont_name,
                                marker=options.delete_markers.get(cont_name))
                if cont_list and cont_list[1]:
                    cont_lists.append((cont_name, cont_list[1]))
                    options.delete_markers[cont_name] = \
                        cont_list[1][-1]['name']
            if not cont_lists:
                with options.delete_queue_sema:
                    options.delete_queue.append((False, False))
                break
            with options.delete_queue_sema:
                done = False
                while not done:
                    done = True
                    for cont_name, cont_list in cont_lists:
                        if cont_list:
                            obj_dict = cont_list.pop(0)
                            options.delete_queue.append(
                                (cont_name, obj_dict['name']))
                            done = False


def do_object_deletes(left, sleep_amount, options):
    if options.direct:
        while left[0] > 0:
            try:
                with options.delete_queue_sema:
                    cont_name, obj_name = options.delete_queue.pop(0)
            except IndexError:
                sleep(.1)
                continue
            if cont_name is False and obj_name is False:
                print 'Not enough to delete; final results will be incorrect!'
                left[0] = 0
                break
            left[0] -= 1
            retry(direct_delete_object_c, options.node, options.part,
                  options.account, cont_name, obj_name)
            sleep(sleep_amount)
    else:
        conn = Connection(options.auth, options.user, options.key,
                          preauthurl=options.preauthurl,
                          preauthtoken=options.preauthtoken, snet=options.snet)
        while left[0] > 0:
            try:
                with options.delete_queue_sema:
                    cont_name, obj_name = options.delete_queue.pop(0)
            except IndexError:
                sleep(.1)
                continue
            if cont_name is False and obj_name is False:
                print 'Not enough to delete; final results will be incorrect!'
                left[0] = 0
                break
            left[0] -= 1
            conn.delete_object(cont_name, obj_name)
            sleep(sleep_amount)


def do_object_puts(left, sleep_amount, options):
    if options.direct:
        while left[0] > 0:
            left[0] -= 1
            partition = options.part
            if options.num_partitions:
                partition = randint(1, int(options.num_partitions))

            retry(direct_put_object_c, options.node, partition,
                  options.account, options.container, uuid4().hex,
                  obj_size=options.object_size, chunk_size=options.chunk_size)
            sleep(sleep_amount)
    else:
        conn = Connection(options.auth, options.user, options.key,
                          preauthurl=options.preauthurl,
                          preauthtoken=options.preauthtoken, snet=options.snet)
        while left[0] > 0:
            left[0] -= 1
            obj_data = '0' * options.object_size
            cont_name = get_rand_container_name(options.num_containers)
            name_ok = False
            obj_name = uuid4().hex
            conn.put_object(cont_name,
                            obj_name, obj_data, content_length=len(obj_data))
            sleep(sleep_amount)


def do_container_heads(left, sleep_amount, options):
    if options.direct:
        while left[0] > 0:
            left[0] -= 1
            retry(direct_head_container, options.node, options.part,
                  options.account, options.container)
            sleep(sleep_amount)
    else:
        conn = Connection(options.auth, options.user, options.key,
                          preauthurl=options.preauthurl,
                          preauthtoken=options.preauthtoken, snet=options.snet)
        while left[0] > 0:
            left[0] -= 1
            conn.head_container(
                get_rand_container_name(options.num_containers))
            sleep(sleep_amount)


TEST_FUNCS = [do_listings, do_object_puts,
              do_container_heads, do_object_deletes]


def run_test(number, options, arg):
    begin = time()
    iterations = 1
    concurrency = 1
    sleep_amount = 0
    while arg:
        typ = arg[0]
        i = 1
        while i < len(arg) and (arg[i].isdigit() or arg[i] == '.'):
            i += 1
        val = float(arg[1:i])
        arg = arg[i:]
        if typ == 'c':
            concurrency = int(val)
        elif typ == 'x':
            iterations = int(val)
        elif typ == 's':
            sleep_amount = val
        else:
            raise Exception('Unknown test argument type: %s' % repr(typ))
    if not options.direct:
        conn = Connection(options.auth, options.user, options.key,
                          preauthurl=options.preauthurl,
                          preauthtoken=options.preauthtoken, snet=options.snet)
        for cont_name in container_names(options.num_containers):
            conn.put_container(cont_name)
    gpool = GreenPool()

    print 'Running test %s %s times at %s concurrency' % \
          (number, iterations, concurrency)
    left = [iterations]
    test_func = TEST_FUNCS[number - 1]
    if test_func == do_object_deletes:
        gpool.spawn(keep_delete_queue_filled, left, options)
    sleep()
    for _ in xrange(concurrency):
        gpool.spawn(test_func, left, sleep_amount, options)
    last = 0
    tick = time()
    while left[0] > 0:
        while time() - tick < options.report_interval:
            if not left[0]:
                break
            sleep(.1)
        if left[0] > 0:
            elapsed = time() - tick
            persec = (iterations - left[0] - last) / elapsed
            print 'Test %s: %s of %s: %.03f/s for the last %.03fs' % \
                  (number, iterations - left[0], iterations, persec, elapsed)
            r = [None, None] * len(TEST_FUNCS)
            r[(number - 1) * 2] = iterations - left[0]
            r[(number - 1) * 2 + 1] = persec
            if options.reportfile:
                options.reportfile.write('%s,' % time() +
                    ','.join([v and str(v) or '' for v in r]) + '\n')
            last = iterations - left[0]
            tick = time()
    gpool.waitall()
    print 'Test %s finished: %.03fs: %.03f/s overall' % \
          (number, time() - begin, iterations / (time() - begin))


if __name__ == '__main__':
    begin = time()
    import gettext
    gettext.install('swift', unicode=1)
    parser = OptionParser(usage='''
Usage: %%prog [options] <test> [<test>] ...
Where <test> is: <number>[x<count>][c<concurrency>][s<sleep>]
    <count>        is how many to do in total
    <concurrency>  is how many to do at any given moment
    <sleep>        is how long to wait before doing another, with the caveat
                   that this applies at a single concurrency level
Available test numbers:
    1  Does listing requests on the container named walt
    2  Does zero byte object puts into the container named walt
    3  Does head requests on the container named walt
    4  Does object deletes

If -C (multiple containers) is set then instead of hitting walt it will use a
randomly chosen container

Examples:
  %%prog -A http://127.0.0.1:11000/v1.0 -U user -K key 1x100c10s2
  %%prog -D http://127.0.0.1:6041/sdb4/106861/8647f434-ce65-4295-ab35-1b921a5a4567/walt 1x100c10s2

  This would do 100 total listings, up to 10 at any given time, and each of
  those ten "concurrency threads" would sleep for 2 seconds between listings.

  For direct object PUTs, you can use urls in form:
  %%prog -D http://127.0.0.1:6010/sdb1 2x100c2s0 -o 100 -k 10 -p 5
  if this is done random account/container strings will be made

'''.strip('\n') % globals())
    parser.add_option('-f', '--file', dest='filename', default=None,
                      help='File name for storing CSV reports (default: None)')
    parser.add_option('-r', '--report-interval', dest='report_interval',
                      default=60,
                      help='Number of seconds between report updates')
    parser.add_option('-s', '--snet', action='store_true', dest='snet',
                      default=False, help='Use SERVICENET internal network')
    parser.add_option('-A', '--auth', dest='auth',
                      help='URL for obtaining an auth token')
    parser.add_option('-U', '--user', dest='user',
                      help='User name for obtaining an auth token')
    parser.add_option('-K', '--key', dest='key',
                      help='Key for obtaining an auth token')
    parser.add_option('-D', '--direct', dest='direct', default=None,
                      help='URL for running direct container server tests; '
                           'the URL should be for the container itself, ex: '
                           'http://127.0.0.1:6041/sdb4/106861/8647f434-ce65-'
                           '4295-ab35-1b921a5a4567/walt')
    parser.add_option('-c', '--num-put-containers', dest='num_put_containers',
                      default=0,
                      help='Number of container used (default 0 is only '
                           'walt) only non-Direct mode.')
    parser.add_option('-o', '--object-size', dest='object_size',
                      default=0,
                      help='Size of objects to PUT (in bytes) '
                           'Must be set >= 0 with direct PUT to object-server')
    parser.add_option('-p', '--num-partitions', dest='num_partitions',
                      default=1,
                      help='Used in direct object PUTs- randomizes partitions '
                      'in given range.  Default: 1')
    parser.add_option('-k', '--chunk-size', dest='chunk_size',
                      default=0,
                      help='Used in direct object PUTs- will send data in '
                      'chunk-size')
    parser.add_option('-n', '--container-name', dest='container_name',
                      default='walt',
                      help='Override default container name (walt).')
    parser.add_option('--delete-marker', dest='delete_marker', default=None,
                      help='Indicates the starting marker for deletions.')
    args = argv[1:]
    if not args:
        args.append('-h')
    (options, args) = parser.parse_args(args)
    options.num_containers = int(options.num_put_containers)
    options.object_size = int(options.object_size)
    options.chunk_size = int(options.chunk_size)
    options.report_interval = float(options.report_interval)
    options.reportfile = options.filename and open(options.filename, 'w')
    if options.container_name:
        default_cont_name = options.container_name
    if options.reportfile:
        options.reportfile.write('Time,' +
            ','.join(['Test %s Count,Test %s Rate' % (n, n)
                      for n in xrange(1, len(TEST_FUNCS) + 1)]) + '\n')

    required_help = '''
Requires WALT_AUTH, WALT_USER, and WALT_KEY environment variables be set or
overridden with -A, -U, or -K. Alternatively, you may use -D for direct
container server testing.'''.strip('\n')
    if not options.direct:
        for attr in ('auth', 'user', 'key'):
            if not getattr(options, attr, None):
                setattr(options, attr, environ.get('WALT_%s' % attr.upper()))
                if not getattr(options, attr, None):
                    exit(required_help)
    else:
        parsed = urlparse(options.direct)
        if ':' in parsed[1]:
            ip, port = parsed[1].split(':', 1)
            port = int(port)
        else:
            ip = parsed[1]
            port = 80
        url_parts = parsed[2].split('/')
        if len(url_parts) == 5:
            _, device, options.part, options.account, options.container = \
                url_parts
        elif len(url_parts) == 2:
            _, device, options.part, options.account, options.container = \
                url_parts + [1, uuid4().hex, uuid4().hex]
        else:
            parser.print_help()
            print "Invalid URL"
            exit()
        options.node = {'ip': ip, 'port': port, 'device': device}

    if not args:
        parser.print_help()
        exit()

    if not options.direct:
        options.preauthurl, options.preauthtoken = \
           get_auth(options.auth, options.user, options.key, snet=options.snet)
    gpool = GreenPool()
    options.delete_queue_sema = Semaphore()
    options.delete_queue = []
    options.delete_markers = dict((n, options.delete_marker)
        for n in container_names(options.num_containers))
    for arg in args:
        i = 0
        while i < len(arg) and arg[i].isdigit():
            i += 1
        gpool.spawn(run_test, int(arg[:i]), options, arg[i:])
    gpool.waitall()
    print 'All tests finished: %.03fs' % (time() - begin)
    if direct_exceptions:
        print "#Direct exceptions: %s" % len(direct_exceptions)
        print "EG: %s" % direct_exceptions[0]
